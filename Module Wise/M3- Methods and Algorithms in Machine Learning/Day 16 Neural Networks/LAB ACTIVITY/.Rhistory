train.x = data.matrix(Final_Data[intrain, -14])
train.y = Final_Data[intrain, 14]
test.x = data.matrix(Final_Data[-intrain, -14])
test.y = Final_Data[-intrain, 14]
mx.set.seed(0)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=c(10), out_node=1, activation="tanh", out_activation="logistic",
num.round=20, array.batch.size=100, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.accuracy)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds
preds=t(preds)
preds
conf.mat = table(pred.label, test.y);conf.mat
Final_Data[intrain, 14]
str(Final_Data)
Final_Data[intrain, -14]
model <- mx.mlp(train.x, train.y, hidden_node=c(10), out_node=1, activation="tanh", out_activation="logistic",
num.round=20, array.batch.size=100, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.accuracy)
View(housing)
housing <- read.csv("housing.csv",header = T,sep = ",")
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 16 Neural Networks/LAB ACTIVITY")
housing <- read.csv("housing.csv",header = T,sep = ",")
sapply(housing, function(x)sum(is.na(x)))
unique(housing_catg_dummy$RAD)
unique(housing$RAD)
housing_cat <- housing[,c("CHAS","RAD")]
library(dummies)
housing_catg_dummy <- dummy.data.frame(housing_cat,sep = ".")
str(housing_catg_dummy)
housing_num <- housing[,c("Crimerate","ResiLandZone","INDUS","NOX","Rooms","AGE","Distance","TAX","PTRATIO","Blacks","LSTAT") ]
housing_num <- data.frame(apply(housing_num,2,function(x){as.character(x)}))
housing_num <- data.frame(apply(housing_num,2,function(x){as.numeric(x)}))
library(vegan)
independent_Variables = decostand(housing_num, "range")
Target <-subset(housing,select = ("OwnOcc"))
Final_Data <-data.frame(housing_catg_dummy,independent_Variables,Target)
str(Final_Data)
library(caret)
set.seed(1234)
intrain = createDataPartition(y = Final_Data$OwnOcc, p=0.7, list = F)
train.x = data.matrix(Final_Data[intrain, -14])
train.y = Final_Data[intrain, 14]
test.x = data.matrix(Final_Data[-intrain, -14])
test.y = Final_Data[-intrain, 14]
mx.set.seed(0)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=c(10), out_node=1, activation="tanh", out_activation="logistic",
num.round=20, array.batch.size=50, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.accuracy)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds=t(preds)
preds
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=50, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.accuracy)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds=t(preds)
preds
conf.mat = table(pred.label, test.y);conf.mat
conf.mat = table(preds, test.y);conf.mat
accuracy = sum(diag(conf.mat))/sum(conf.mat);accuracy
precision = conf.mat[2,2]/sum(conf.mat[2,]);precision
recall = conf.mat[2,2]/sum(conf.mat[,2]);recall
table(test.y)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=50, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds=t(preds)
preds
conf.mat = table(preds, test.y);conf.mat
accuracy = sum(diag(conf.mat))/sum(conf.mat);accuracy
precision = conf.mat[2,2]/sum(conf.mat[2,]);precision
Final_Data[intrain, -15]
require(mxnet)
mx.set.seed(0)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=50, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds=t(preds)
preds
conf.mat = table(preds, test.y);conf.mat
accuracy = sum(diag(conf.mat))/sum(conf.mat);accuracy
precision = conf.mat[2,2]/sum(conf.mat[2,]);precision
require(mxnet)
mx.set.seed(0)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="tanh", out_activation="rmse",
num.round=20, array.batch.size=100, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
test.x
model
preds = predict(model, test.x)
preds
preds=t(preds)
test.y
table(preds, test.y)
t(test.y)
test.y
preds
preds = predict(model, test.x)
preds
test.y
preds=t(preds)
test.y
preds
preds
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="tanh", out_activation="rmse",
num.round=20, array.batch.size=100, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="relu", out_activation="rmse",
num.round=20, array.batch.size=100, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds
View(Final_Data)
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 16 Neural Networks/LAB ACTIVITY")
housing <- read.csv("housing.csv",header = T,sep = ",")
unique(housing$RAD)
housing_cat <- housing[,c("CHAS","RAD")]
library(dummies)
housing_catg_dummy <- dummy.data.frame(housing_cat,sep = ".")
str(housing_catg_dummy)
housing_num <- housing[,c("Crimerate","ResiLandZone","INDUS","NOX","Rooms","AGE","Distance","TAX","PTRATIO","Blacks","LSTAT") ]
housing_num <- data.frame(apply(housing_num,2,function(x){as.character(x)}))
housing_num <- data.frame(apply(housing_num,2,function(x){as.numeric(x)}))
library(vegan)
independent_Variables = decostand(housing_num, "range")
Target <-subset(housing,select = ("OwnOcc"))
str(Target)
Final_Data <-data.frame(housing_catg_dummy,independent_Variables,Target)
str(Final_Data)
sum(is.na(Final_Data))
library(caret)
set.seed(1234)
intrain = createDataPartition(y = Final_Data$OwnOcc, p=0.7, list = F)
train.x = data.matrix(Final_Data[intrain, -14])
train.y = Final_Data[intrain, 14]
test.x = data.matrix(Final_Data[-intrain, -14])
test.y = Final_Data[-intrain, 14]
require(mxnet)
mx.set.seed(0)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="relu", out_activation="rmse",
num.round=20, array.batch.size=100, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds=t(preds)
preds
mx.set.seed(2)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="relu", out_activation="rmse",
num.round=20, array.batch.size=100, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 16 Neural Networks/LAB ACTIVITY")
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 16 Neural Networks/LAB ACTIVITY")
train <- read.csv("train_sample.csv")
test <- read.csv("test_sample.csv")
train_mat <- data.matrix(train)
test <- data.matrix(test)
train.x <- train[,-1]
train.y <- train[,1]
train.x <- (train.x/255)
test.x <- test[,-1]
test.y <- test[,1]
test.x <- (test.x/255)
require(mxnet)
model <- mx.mlp(train.x,train.y,hidden_node = c(128,64),out_node = 10,dropout = NULL,activation = "relu",out_activation = "softmax",
num.round=10,array.batch.size = 100,learning.rate =0.07,momentum=0.9,eval.matrix=mx.metric.accuracy)
View(train)
model1<-mx.mlp(train.x, train.y, hidden_node =c(128,64), out_node=10,
dropout = NULL, activation = "relu", out_activation = "softmax",
num.round=10, array.batch.size=100, learning.rate=0.07,
momentum=0.9, eval.metric=mx.metric.accuracy)
install.packages("drat", repos="https://cran.rstudio.com")
install.packages("drat", repos = "https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
install.packages("mxnet")
model1<-mx.mlp(train.x, train.y, hidden_node =c(128,64), out_node=10,
dropout = NULL, activation = "relu", out_activation = "softmax",
num.round=10, array.batch.size=100, learning.rate=0.07,
momentum=0.9, eval.metric=mx.metric.accuracy)
str(train.x)
train <- data.matrix(train)
test <- data.matrix(test)
train.x <- train[,-1]
train.y <- train[,1]
train.x <- (train.x/255)
test.x <- test[,-1]
test.y <- test[,1]
test.x <- (test.x/255)
require(mxnet)
model1<-mx.mlp(train.x, train.y, hidden_node =c(128,64), out_node=10,
dropout = NULL, activation = "relu", out_activation = "softmax",
num.round=10, array.batch.size=100, learning.rate=0.07,
momentum=0.9, eval.metric=mx.metric.accuracy)
preds <- predict(model1, test.x)
dim(preds)
pred.label <- max.col(t(preds)) - 1
table(pred.label)
pred.label
head(pred.label)
table(test_y,pred.label)
table(test.y,pred.label)
sum(diag(table(test.y,pred.label)))/1000
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 16 Neural Networks/LAB ACTIVITY")
housing <- read.csv("housing.csv",header = T,sep = ",")
housing_cat <- housing[,c("CHAS","RAD")]
library(dummies)
housing_catg_dummy <- dummy.data.frame(housing_cat,sep = ".")
str(housing_catg_dummy)
housing_num <- housing[,c("Crimerate","ResiLandZone","INDUS","NOX","Rooms","AGE","Distance","TAX","PTRATIO","Blacks","LSTAT") ]
housing_num <- data.frame(apply(housing_num,2,function(x){as.character(x)}))
housing_num <- data.frame(apply(housing_num,2,function(x){as.numeric(x)}))
library(vegan)
independent_Variables = decostand(housing_num, "range")
Target <-subset(housing,select = ("OwnOcc"))
str(Target)
Final_Data <-data.frame(housing_catg_dummy,independent_Variables,Target)
str(Final_Data)
sum(is.na(Final_Data))
library(caret)
set.seed(1234)
intrain = createDataPartition(y = Final_Data$OwnOcc, p=0.7, list = F)
train.x = data.matrix(Final_Data[intrain, -14])
train.y = Final_Data[intrain, 14]
test.x = data.matrix(Final_Data[-intrain, -14])
test.y = Final_Data[-intrain, 14]
require(mxnet)
mx.set.seed(2)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="relu", out_activation="rmse",
num.round=20, array.batch.size=100, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds
preds=t(preds)
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="relu", out_activation="rmse",
num.round=20, array.batch.size=100, learning.rate=0.009, momentum=0.8,
eval.metric=mx.metric.rmse)
require(mxnet)
mx.set.seed(2)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="relu", out_activation="rmse",
num.round=20, array.batch.size=100, learning.rate=0.009, momentum=0.8,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds=t(preds)
preds
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.009, momentum=0.8,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.01, momentum=0.8,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.02, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.03, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.009, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.009, momentum=0.9,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=50, learning.rate=0.009, momentum=0.9,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=50, learning.rate=0.01, momentum=0.9,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=50, learning.rate=0.01, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="relu", out_activation="rmse",
num.round=500, array.batch.size=50, learning.rate=0.01, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=500, array.batch.size=100, learning.rate=0.01, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.02, momentum=0.7,
eval.metric=mx.metric.rmse)
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 16 Neural Networks/LAB ACTIVITY")
housing <- read.csv("housing.csv",header = T,sep = ",")
sapply(housing, function(x)sum(is.na(x)))
unique(housing$RAD)
housing_cat <- housing[,c("CHAS","RAD")]
library(dummies)
housing_catg_dummy <- dummy.data.frame(housing_cat,sep = ".")
str(housing_catg_dummy)
housing_num <- housing[,c("Crimerate","ResiLandZone","INDUS","NOX","Rooms","AGE","Distance","TAX","PTRATIO","Blacks","LSTAT") ]
housing_num <- data.frame(apply(housing_num,2,function(x){as.character(x)}))
housing_num <- data.frame(apply(housing_num,2,function(x){as.numeric(x)}))
library(vegan)
independent_Variables = decostand(housing_num, "range")
Target <-subset(housing,select = ("OwnOcc"))
str(Target)
Final_Data <-data.frame(housing_catg_dummy,independent_Variables,Target)
str(Final_Data)
sum(is.na(Final_Data))
library(caret)
set.seed(1234)
intrain = createDataPartition(y = Final_Data$OwnOcc, p=0.7, list = F)
train.x = data.matrix(Final_Data[intrain, -14])
train.y = Final_Data[intrain, 14]
test.x = data.matrix(Final_Data[-intrain, -14])
test.y = Final_Data[-intrain, 14]
require(mxnet)
mx.set.seed(2)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.02, momentum=0.7,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.05, momentum=0.9,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.9,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.3, momentum=0.9,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.1, momentum=0.9,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.9,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=15, out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(15,2), out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.8,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(15,2), out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.8,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(10,2), out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.8,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(20,2), out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.8,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(20), out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.8,
eval.metric=mx.metric.rmse)
set.seed(999)
intrain = createDataPartition(y = Final_Data$OwnOcc, p=0.7, list = F)
train.x = data.matrix(Final_Data[intrain, -14])
train.y = Final_Data[intrain, 14]
test.x = data.matrix(Final_Data[-intrain, -14])
test.y = Final_Data[-intrain, 14]
mx.set.seed(0)
model <- mx.mlp(train.x, train.y, hidden_node=c(20), out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.8,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(10), out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.2, momentum=0.8,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(10), out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.02, momentum=0.8,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(10), out_node=1, activation="relu", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.02, momentum=0.7,
eval.metric=mx.metric.rmse)
model <- mx.mlp(train.x, train.y, hidden_node=c(10), out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.02, momentum=0.7,
eval.metric=mx.metric.rmse)
rm(list = ls())
housing <- read.csv("housing.csv",header = T,sep = ",")
sapply(housing, function(x)sum(is.na(x)))
unique(housing$RAD)
housing_cat <- housing[,c("CHAS","RAD")]
library(dummies)
housing_catg_dummy <- dummy.data.frame(housing_cat,sep = ".")
housing_cat <- housing[,c("CHAS")]
library(dummies)
housing_catg_dummy <- dummy.data.frame(housing_cat,sep = ".")
str(housing_catg_dummy)
housing_num <- housing[,c("Crimerate","ResiLandZone","INDUS","NOX","Rooms","AGE","Distance","TAX","PTRATIO","Blacks","LSTAT") ]
housing_num <- data.frame(apply(housing_num,2,function(x){as.character(x)}))
housing_num <- data.frame(apply(housing_num,2,function(x){as.numeric(x)}))
library(vegan)
independent_Variables = decostand(housing_num, "range")
Target <-subset(housing,select = ("OwnOcc"))
str(Target)
Final_Data <-data.frame(housing_catg_dummy,independent_Variables,Target)
str(Final_Data)
Target <-subset(housing,select = ("OwnOcc"))
Final_Data <-data.frame(housing_catg_dummy,independent_Variables,Target)
View(independent_Variables)
View(housing_catg_dummy)
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 16 Neural Networks/LAB ACTIVITY")
housing <- read.csv("housing.csv",header = T,sep = ",")
sapply(housing, function(x)sum(is.na(x)))
unique(housing$RAD)
housing_cat <- housing[,c("CHAS")]
housing_num <- housing[,c("Crimerate","ResiLandZone","INDUS","NOX","Rooms","AGE","Distance","TAX","PTRATIO","Blacks","LSTAT") ]
housing_num <- data.frame(apply(housing_num,2,function(x){as.character(x)}))
housing_num <- data.frame(apply(housing_num,2,function(x){as.numeric(x)}))
library(vegan)
unique(housing$RAD)
housing_cat <- housing[,c("CHAS")]
library(dummies)
housing_catg_dummy <- dummy.data.frame(housing_cat,sep = ".")
str(housing_catg_dummy)
housing_num <- housing[,c("Crimerate","ResiLandZone","INDUS","NOX","Rooms","AGE","Distance","TAX","PTRATIO","Blacks","LSTAT","RAD") ]
housing_num <- data.frame(apply(housing_num,2,function(x){as.character(x)}))
housing_num <- data.frame(apply(housing_num,2,function(x){as.numeric(x)}))
library(vegan)
independent_Variables = decostand(housing_num, "range")
Target <-subset(housing,select = ("OwnOcc"))
str(Target)
Final_Data <-data.frame(housing_catg_dummy,independent_Variables,Target)
housing <- read.csv("housing.csv",header = T,sep = ",")
housing$CHAS<-as.factor(as.character(housing$CHAS))
housing$CHAS<-as.factor(as.character(housing$RAD))
housing <- read.csv("housing.csv",header = T,sep = ",")
housing$CHAS<-as.factor(as.character(housing$CHAS))
housing$RAD<-as.factor(as.character(housing$RAD))
sapply(housing, function(x)sum(is.na(x)))
unique(housing$RAD)
housing_cat <- housing[,c("CHAS","RAD")]
library(dummies)
housing_catg_dummy <- dummy.data.frame(housing_cat,sep = ".")
str(housing_catg_dummy)
housing_num <- housing[,c("Crimerate","ResiLandZone","INDUS","NOX","Rooms","AGE","Distance","TAX","PTRATIO","Blacks","LSTAT","RAD") ]
housing_num <- data.frame(apply(housing_num,2,function(x){as.character(x)}))
housing_num <- data.frame(apply(housing_num,2,function(x){as.numeric(x)}))
library(vegan)
independent_Variables = decostand(housing_num, "range")
Target <-subset(housing,select = ("OwnOcc"))
str(Target)
Final_Data <-data.frame(housing_catg_dummy,independent_Variables,Target)
str(Final_Data)
sum(is.na(Final_Data))
library(caret)
set.seed(999)
intrain = createDataPartition(y = Final_Data$OwnOcc, p=0.7, list = F)
train.x = data.matrix(Final_Data[intrain, -14])
train.y = Final_Data[intrain, 14]
test.x = data.matrix(Final_Data[-intrain, -14])
test.y = Final_Data[-intrain, 14]
require(mxnet)
mx.set.seed(0)
Sys.time() -> start
model <- mx.mlp(train.x, train.y, hidden_node=c(10), out_node=1, activation="tanh", out_activation="rmse",
num.round=100, array.batch.size=100, learning.rate=0.02, momentum=0.7,
eval.metric=mx.metric.rmse)
Sys.time() -> end
paste(end - start)
preds = predict(model, test.x)
preds=t(preds)
preds
result <- regr.eval(preds,test.y)
library(DMwR)
result <- regr.eval(preds,test.y)
result
