require(XLConnect) #library(XLConnect) # To loas an add-on package
library(xlsx)
install.packages("XLConnect")
install.packages("XLConnect")
install.packages("C:/Users/Bargavi/AppData/Local/Temp/RtmpSAxDxm/downloaded_packages/XLConnect_0.2-12.zip", repos = NULL, type = "win.binary")
library(xlsx)
install.packages("XLConnect")
install.packages("xlsx")
install.packages("xlsx")
install.packages("plyr")
install.packages("DMwR")
install.packages("caTools")
install.packages("vegan")
install.packages("infotheo")
install.packages("dummies")
install.packages("reshape2")
install.packages("XLConnect")
2+2
2+3^2
(2+2)^4
sqrt(2)
log(2)  # default base is exp(1)
e
exp
pi
e
exp(1)
x = 5
x=6
y = 10
z <- x+y
z
#To create sequence of nummbers
seq(1,5, by=.5)
#Repeating a number
rep(1,10)
#############################   Evaluation and Printing    #########################################################
# The <- symbol is the assignment operator.
x <- 5 	## nothing printed
x 		## auto-printing occurs
print(x) 	## explicit printing
# The : operator is used to create integer sequences.
x <- 1:20
x
##################################### Creating Vectors######################################
# The c() function can be used to create vectors of objects.
x <- c(0.5, 0.6) ## numeric
x <- c(TRUE, FALSE) ## logical
x <- c(T, F) ## logical
x <- c("a", "b", "c") ## character
x <- 9:29 ## integer
x <- c(1+0i, 2+4i) ## complex
#Using the vector() function
x <- vector("numeric", length = 10)
x
#################################  Mixing Objects ##################################
y <- c(1.7, "a") ## character
y <- c(TRUE, 2) ## numeric
y <- c(TRUE, 2,FALSE) ## numeric
y <- c("a", TRUE) ## character
###############################  Explicit Coercion #########################
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
#Coercion results in NAs.
x <- c("a", "b", "c")
as.numeric(x)
as.logical(x)
x <- c("a", "b", "c", 3)
as.numeric(x)
###########################################  Matrices  ########################
m <- matrix(nrow = 2, ncol = 3)
m
m <- matrix(1:6, nrow = 2, ncol = 3)  # here byrow=FALSE
m
m <- matrix(1:6, nrow = 2, ncol = 3,byrow = TRUE)
# Matrices can be constructed row-wise also by defining parameter byrow
m
# Matrices can be constructed row-wise also by defining parameter byrow
m <- matrix(1:6, nrow = 2, ncol = 3, byrow=TRUE)
m
m <- 1:10
m
dim(m) <- c(2, 5)
m
##################  cbind-ing and rbind-ing   ###########################################
x <- 1:3
y <- 10:12
cbind(x, y)
rbind(x, y)
##############################  Lists ###########################
x <- list(c(1,2), "a", TRUE)
x
##############################  Factors  ##################################
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
############################   Missing Values  ##############################
x <- c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
x <- c(1, 2, NaN, NA, 4)
is.na(x)
is.nan(x)
###################   Data Frames   ###############################
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x <- c(1, 2, NaN, NA, 4)
is.na(x)
x <- c(1, 2, NaN, NA, "?")
is.na(x)
is.nan(x)
list = ls()
list = ls()
rm(list=c(m,x,y))
warnings()
rm(list=(m,x,y))
rm(list=("m","x","y"))
list = ls()
rm(list=("m","x","y"))
rm(list=c("m","x","y"))
rm(list = ls())
setwd("C:\\Users\\Bargavi\\Desktop\\20160107_Batch24_CSE7112c_R_Lab_Day")
##Reading the csv files and RData files into R environment
Grade<-read.csv("Grade1.csv",header=T,sep=",")
setwd("C:\\Users\\Bargavi\\Desktop\\20160107_Batch24_CSE7112c_R_Lab_Day\\INPUTS")
##Reading the csv files and RData files into R environment
Grade<-read.csv("Grade1.csv",header=T,sep=",")
setwd("C:\\Users\\Bargavi\\Desktop\\20160107_Batch24_CSE7112c_R_Lab_Day")
Grade<-read.csv("INPUTS\\Grade1.csv",header=T,sep=",")
read<-read.table("C:\\Users\\Bargavi\\Desktop\\20161113_Batch23_CSE7112c_R_Lab_Day\\INPUTS\\greek.txt",sep="\t",header=T)
setwd("C:\\Users\\Bargavi\\Desktop\\20160107_Batch24_CSE7112c_R_Lab_Day\\INPUTS")
Grade<-read.csv("Grade1.csv",header=T,sep=",")
##Reading other formats we use read.table command
read<-read.table("C:\\Users\\Bargavi\\Desktop\\20160107_Batch24_CSE7112c_R_Lab_Day\\INPUTS\\greek.txt",sep="\t",header=T)
####Reading Excel files  ##There might be an RJava issue
require(XLConnect) #library(XLConnect) # To loas an add-on package
wb<-loadWorkbook("Book3.xlsx")
sheet<-readWorksheet(wb,"Sheet1",header=T)
################ Writing Output Files #########################################################################
setwd("C:\\Users\\Bargavi\\Desktop\\20161113_Batch23_CSE7112c_R_Lab_Day\\OUTPUTS")
setwd("C:\\Users\\Bargavi\\Desktop\\20160107_Batch24_CSE7112c_R_Lab_Day\\OUTPUTS")
#### writing into a CSV file
write.csv(Grade,"data.csv", row.names=F)
#### writing into Excel
library(xlsx)
write.xlsx(sheet,"C:\\Users\\Bargavi\\Desktop\\20161113_Batch23_CSE7112c_R_Lab_Day\\OUTPUTS\\write.xlsx",row.names=F)
attach(mtcars)
data<-mtcars
##Want to find max value for each column
apply(data,2,min) #This generates the min values for each numeric attribute
##writing this to a data frame
A<-apply(data[,2:11],2,min)
A<-data.frame(min=apply(data[,2:11],2,min))
B<-apply(data[,2:11],2,max)
##We can find the stats for each of the variable separately
##If we want to have all the stats in a data frame we can write a customize function for this
stat<-function(x){
"Mean"=mean(x)
"Min"=min(x)
"Max"=max(x)
A<-data.frame(Min,Mean,Max)
return(A)
}
stats<-apply(data[,2:11],2,FUN=stat) ##Observe the ouptput of apply.. it is a list
result<-do.call(rbind,stats)
#lapply
##to use apply on a vector and return a list
lappy<-lapply(data[,2:11],mean)
#tapply-- gives a table wrt to a categorical attribute
tappy<-tapply(mtcars$mpg,mtcars$cyl,mean) # takes one function and gives the values and not a dataframe
tappy ##This gives out the mean mileage for each cylinder types
#########################################Subsetting###############################
##This might form an important aspect in Data analysis where we might want to work on a subset of data
library(dplyr)
names(mtcars)
filter(flights, mpg >= 22, gear == 2)
filter(data, mpg >= 22, gear == 2)
data
filter(data, mpg >= 22, gear == 3)
filter(data, mpg >= 18, gear == 3)
data1<-subset(data,mpg>25,select=mpg:carb) #From data extracts all the records whose mpg>25 and all columns
data
data2<-subset(data,mpg>25 | gear==5,select=mpg:carb)
data2
select(data,mpg,cyl,disp,hp)
filter(data,mpg>25)
filter(data,mpg>25 | gear==5)
library(plyr)
attach(baseball)
data<-baseball
str(data) ##outputs what to which type each variable belong to.
summary(data) ## gives the overall summary of the data,we observe that the stats are given for numerical
## attributes, if characters then class and mode are mentioned.
##Conversion of variable types if necessary
##We can consider "teams" as a factor ao that we can compare runs batted and home runs for teams
data$team<-as.factor(data$team)
str(data$team)
##We do this appropriate conversions first
##Missing Values
##To count the number of missing values
sum(is.na(data)) ##Gives the number of missing values in the data. What to do with the missing values
#option1. Omit all records with NA values
data1<-na.omit(data)  ##it omits all the records which has atleast one NA value in it
data2<-data[complete.cases(data),]  ##another way
View(data)
x=x <- data.frame(x = 1:10, Y = c(T, T, F, F,F,F,NA,NA,T,T), Z=c(NA,NA,7,8,9,5,11,6,9,4) )
temp <- data.frame(x = 1:10, Y = c(T, T, F, F,F,F,NA,NA,T,T), Z=c(NA,NA,7,8,9,5,11,6,9,4) )
library(DMwR)
sum(is.na(temp))
temp1<-centralImputation(temp) #Cenral Imputation
sum(is.na(temp1))
View(temp1)
View(temp)
temp2<-knnImputation(temp,scale=T,k=1) #KNN Imputation
sum(is.na(temp2))
View(temp2)
temp <- data.frame(x = 1:10, Y = c(T, T, F, F,F,F,NA,NA,T,T), Z=c(NA,NA,7,8,9,5,11,9,9,4) )
sum(is.na(temp))
temp1<-centralImputation(temp) #Cenral Imputation
sum(is.na(temp1))
temp2<-knnImputation(temp,scale=T,k=1) #KNN Imputation
sum(is.na(temp2))
View(temp)
View(temp1)
View(temp2)
centralvalue(temp$Z)
uuhhgui
median(temp$Z)
median(temp$Z[3:10])
centralValue(temp$Z[3:10])
knnImputation()
knnImputation
scale(temp$x)
Cust<-read.csv("CustTransDat.csv",header=T,sep=",")
setwd("C:\\Users\\Bargavi\\Desktop\\20160107_Batch24_CSE7112c_R_Lab_Day\\INPUTS")
names(Cust)
library(reshape2)
data2<-dcast(Cust,Quarter+Month~Year,fun.aggregate = sum,value.var="Cost")
Cust<-read.csv("CustTransDat.csv",header=T,sep=",")
##Sometimes it may be useful to change the data the way it looks. Forexample we have an
## a transaction data of customers for a store. We would like to know the revenue generated
##by year and by quarter. Then reshaphing would give a good representation
names(Cust)
library(reshape2)
data2<-dcast(Cust,Quarter+Month~Year,fun.aggregate = sum,value.var="Cost")
View(data2)
