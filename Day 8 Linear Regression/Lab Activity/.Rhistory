x <-"Hello World"
print(x)
y<- 1:5
y<- 1:5
z <- matrix(
data = 1:6,
nrow= 2,
ncol=3
)
z
a
a <- array (
data = 1:8,
dim = c(2,2,2)
)
a
l <- list(True,123L,1.34,"abc")
l <- list(TRUE,123L,1.34,"abc")
categories <- c("Male","Female","Male","Female","Male","Male")
factor<- factor(categories)
factor
levels(factor)
unclass(factor)
df <- data.frame(
Name = c("Cat","Dog","Cow","Pig"),
HowMany = c(5,10,12,32),
IsPet = c(TRUE,TRUE,FALSE,FALSE)
)
df
c(1,2,4)+ c(1,2,4,5)
c(1,2,4)+ c(4,5,6)
m <-matrix(data =1:6, nrow = 2,ncol = 3)
n <-matrix(1:6,2,3)
identical(m,n)
m=n
m==n
?data.frame
install.packages("dplyr")
library("dplyr")
?data.frame
mean(abs(rnom(100)))
mean(abs(rnorm(100)))
mean(abs(rnorm(100)))
mean(abs(rnorm(100)))
dev.off()
dev.off()
pdf("xh.pdf")
hist(rnorm(100))
dev.off()
x <- c(1,2,3)
print(x)
x <- c(4,5,6)
print(x)
mean(Nile)
Nile
hist(Nile)
q()
hist(Nile)
source('~/.active-rstudio-document')
oddCount <- function(x){
k <-0
for(n in x){
if(n %% 2 == 1)
K <- K+1
}
return (k)
}
oddCount(c(1,2,3,4,5,6,7))
oddCount(c(1,2,3,4,5,6,7))
oddCount(c(1,2,3,4,5,6,7))
oddCount <- function(x){
k <-0
for(n in x){
if(n %% 2 == 1)
k <- k+1
}
return (k)
}
oddCount(c(1,2,3,4,5,6,7))
oddCount(c(2,4,5,6,7,8,9,10))
oddCount <- function(x){
Odd <-0
Even <- 0
for(n in x){
if(n %% 2 == 1)
Odd <- Odd+1
else
Even <- Even+1
}
return (Odd, Even)
}
oddCount(c(1,2,3,4,5,6,7))
oddCount(c(1,2,3,4,5,6,7))
oddCount <- function(x){
k <-0
for(n in x){
if(n %% 2 == 1)
k <- k+1
}
return (k)
}
oddCount(c(1,2,3,4,5,6,7))
oddCount(c(2,4,5,6,7,8,9,10))
x <- c(4,"abc",9)
x
mode(x)
y <-c(1,2,3)
mode(y)
z <- c(TRUE,FALSE)
mode(z)
m <- rbind(c(1,3),c(5,7))
m
hn <- hist(Nile)
print(hn)
str(hn)
x_train <- input_variables_values_training_datasets
install.packages("rJava")
install.packages("rJava")
install.packages(rJava)
install.packages(rjava)
install.packages(rjava)
install.packages(rJava)
install.packages("rJava")
install.packages("rJava")
install.packages(rJava)
install.packages("rJava")
input <- mtcars[,c('mpg','cyl')]
print(head(input))
pritn(head(mtcars))
pritn(mtcars)
print(head(mtcars))
png(file = "boxplot.png")
boxplot(mpg ~ cyl, data= mtcars, xlab = "Number of Cylinders", ylab= "Miles Per Gallon", main="Milage Data")
dev.off()
png(file = "boxplot.png")
boxplot(mpg ~ cyl, data= mtcars, xlab = "Number of Cylinders", ylab= "Miles Per Gallon", main="Milage Data")
boxplot(mpg ~ cyl, data = mtcars, xlab = "Number of Cylinders",
png(file = "boxplot.png")
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars, xlab = "Number of Cylinders",
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales')
import.packages('ggplot2')
install.packages('ggplot2')
boxplot(mpg ~ cyl, data = mtcars, xlab = "Number of Cylinders",
ylab = "Miles Per Gallon", main = "Mileage Data")
# Save the file.
dev.off()
input <- mtcars[,c('mpg','cyl')]
print(head(input))
print(input)
??bind_rows
str
getwd()
dir
dir()
read.csv(file="*C:\Users\quadris\Desktop\simple.csv" , header=TRUE,sep=",")
read.csv(file="*C:\\Users\\quadris\\Desktop\\simple.csv" , header=TRUE,sep=",")
getwd()
read.csv(file="simple.csv" , header=TRUE,sep=",")
heisenberg <-read.csv(file="simple.csv" , header=TRUE,sep=",")
summary()
summary(heisenberg)
heisenberg
x <- c(11, 7.5, 8.5, 10, 10, 10.5, 5.5, 10, 9, 9.5, 5.25, 8, 6.5, 10.5, 8.75, 0, 6, 6, 6.75,
x
heisenberg
x <- c(11, 7.5, 8.5, 10, 10, 10.5, 5.5, 10, 9, 9.5, 5.25, 8, 6.5, 10.5, 8.75, 0, 6, 6, 6.75, 8.75, 0, 9.5, 7.5, 8.5, 7 );
x
summary(x)
boxplot(x)
var(x)
sd(x)
z = read.csv(file="sample.csv",header = TRUE,sep=",")
z = read.csv(file="sample.csv",header = TRUE,sep=",")
z = read.csv(file="simple1",header = TRUE,sep=",")
getwd()
heisenberg <-read.csv(file="simple.csv" , header=TRUE,sep=",")
heisenberg
summary(heisenberg)
boxplot(heisenberg)
x
summary(x)
var(x)
sd(x)
boxplot(heisenberg$Philips)
boxplot(heisenberg$Philips, heisenberg$Mathew)
boxplot(heisenberg$Philips as Philips, heisenberg$Mathew as Mathew)
boxplot(heisenberg$Philips, heisenberg$Mathew)
PrA <- c(.75,.25)
PrB <- c(6/9,5/7)
BayesTheorem(PrA, PrB)
BayesTheorem(PrA, PrBA)
install.packages('LaplacesDemon')
BayesTheorem(PrA, PrBA)
PrA <- c(.75,.25)
PrB <- c(6/9,5/7)
BayesTheorem(PrA, PrBA)
heisenberg <-read.csv(file="simple.csv" , header=TRUE,sep=",")
install.packages('LaplacesDemon')
PrA <- c(0.75,0.25)
PrBA <- c(6/9, 5/7)
BayesTheorem(PrA, PrBA)
libarary(LaplacesDemon)
library(LaplacesDemon)
PrA <- c(0.75,0.25)
PrBA <- c(6/9, 5/7)
BayesTheorem(PrA, PrBA)
BayesTheorem(PrA, PrBA)
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
x <- c(4,2,4,3,11,6,4,4,1,4,2,3,3,1,2,2,6,0,2,1,3,2)
summary(x)
boxplot(x)
var(x)
sd(x)
hist(x)
duration = faithful$eruptions
breaks = seq(1.5,5.5, by=0.5)
duration.cut = cut(duration, breaks,right = FALSE)
duration.freq = table(duration.freq)
duration.cumrelfreq = duration.cumrelfreq/nrow(faithful)
cumrelfreq0 = c(0, duration.cumrelfreq)
plot(breaks, cumrelfreq0,main="Old Faithful Eruptions", xlab="Duration",
ylab="Cumulative frequency")
lines(breaks, cumrelfreq0)
cumrelfreq0 = c(0, duration.cumrelfreq)
duration.cumrelfreq = duration.cumfreq / nrow(faithful)
duration = faithful$eruptions
stem(duration)
eruptions
duration
library(googleVis)
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
require(datasets)
options=list(region="US",
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
x<- c(4,7,11,16,20,22,25,26,33)
summary(x)
mode(x)
getmode(x)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
x<- c(4,7,11,16,20,22,25,26,33)
summary(x)
getmode(x)
x<- c(4,7,11,16,20,22,22,25,26,33)
getmode(x)
plot(cars)
df
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
(39-30)/16
(39-30)/4
(40-30)/4
(21-30)/4
pnorm(40,mean = 30,sd=4)
pnorm(21,mean = 30,sd=4)
1- pnorm(21,mean = 30,sd=4)
pnorm(40,mean = 30,sd=4,1e-3)
pnorm(40,mean = 30,sd=4)
sprintf("%.3f",0.9937903)
foreach(STDIN)
sapply(STDIN,FUN = pnorm(STDIN,mean=30,sd=4))
STDIN <- c(40,21,30,35)
sapply(STDIN,FUN = pnorm(STDIN,mean=30,sd=4))
sapply(STDIN,FUN (pnorm(STDIN,mean=30,sd=4)))
sapply(STDIN,function(x) pnorm(STDIN,mean=30,sd=4))
pnorm(40,mean = 30,sd=4)
abc <-sapply(STDIN,function(x) pnorm(STDIN,mean=30,sd=4))
abc<-abc[,1]
abc
sprintf(%.3f,abc)
sapply(abc, function(x) sprintf(%.3f,abc))
sapply(abc, function(x) sprintf(%.3f,x))
sprintf(%.3f,x)
sprintf(%.3f,x[1,])
sprintf(%.3f,abc[1,])
abc[1,]
abc[1,]
abc
abc(1)
abc[1]
for(i<=length(abc))
length(abc)
Result[i]
result <- NULL
for(i<length(abc))
i=0
for(i<length(abc))
result <- sprintf("%.3f",abc[])
result
result <- sprintf("%.3f",abc)
result
abc[2] <- 1-abc[2]
abc[3] <- abc[3]-abc[4]
abc
abc[4]<- Null
abc[4]<- NA
abc
abc <- abc(1:3)
abc <- abc[1:3]
abc
result <- sprintf("%.3f",abc)
result
rm(list=ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 21 KNN Collaborative Filters/Lab activity")
getwd()
data = read.csv("UniversalBank.csv",header = T,sep=",")
str(data)
source('C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 21 KNN Collaborative Filters/Lab activity/Universal bank.R', echo=TRUE)
sapply(data, function(x)sum(is.na(x)))
data = data[-1]
data = data[-4]
data = read.csv("UniversalBank.csv",header = T,sep=",")
str(data)
sapply(data, function(x)sum(is.na(x)))
data = subset(data, select= -c(ID,ZIP.CODE))
data = subset(data, select= -c(ID,ZIP.Code))
data$Education = as.factor(as.numeric(data$Education))
data$Education = as.factor(as.character(data$Education))
data = read.csv("UniversalBank.csv",header = T,sep=",")
str(data)
sapply(data, function(x)sum(is.na(x)))
data = subset(data, select= -c(ID,ZIP.Code))
data$Education = as.factor(as.character(data$Education))
Education1 = dummy(data$Education)
library(dummies)
Education1 = dummy(data$Education)
BankData = subset(data, select = -c(Education))
BankData1= cbind(BankData,Education1)
require(caTools)
set.seed(123)
sample = sample.split(BankData1$Personal.Loan, SplitRatio = .70)
train = subset(BankData1, sample == TRUE)
test = subset(BankData1, sample == FALSE)
X_Train = subset(train, select = -c(Personal.Loan))
X_Test = subset(test, select = -c(Personal.Loan))
library(class)
pred = knn(X_train,X_Test,train$Personal.Loan,k=1)
pred = knn(X_Train,X_Test,train$Personal.Loan,k=1)
a = table(pred,test$Personal.Loan)
a
a = sum(diag(a)/nrow(X_Test))
a
library(vegan)
stadBank = decostand(BankData1,"range")
require(caTools)
set.seed(213)
sampleStd = sampleStd.split(stadBank$Personal.Loan, SplitRatio =.70)
sample = sample.split(stadBank$Personal.Loan, SplitRatio =.70)
trainStd = subset(stadBank,sample == TRUE)
testStd = subset(stadBank,sample == FALSE)
X_Std_Train = subset(trainStd, select = -c(Personal.Loan))
X_Std_Test = subset(testStd, select = -c(Personal.Loan))
predStd = knn(X_Std_Train,
X_Std_Test,
testStd$Personal.Loan,
k=1)
predStd = knn(X_Std_Train,
X_Std_Test,
trainStd$Personal.Loan,
k=1)
aStd = table(predStd,testStd$Personal.Loan)
aStd = sum(diag(aStd)/nrow(X_Std_Test))
aStd
keep = condense(X_Std_Train,trainStd)
keep = condense(X_Std_Train,trainStd$Personal.Loan)
predCond = knn(X_Std_Train[keep],
X_Std_Test,
trainStd$Personal.Loan,
k=5)
predCond = knn(X_Std_Train[keep,],
X_Std_Test,
trainStd$Personal.Loan[keep],
k=5)
aCond = table(predCond,testStd$Personal.Loan)
aCondAccuracy = sum(diag(aCond))/nrow(X_Std_Test)
aCondAccuracy
install.packages(FNN)
install.packages("FNN")
library(FNN)
predFNN = FNN::knn(X_Std_Train[keep,],
X_Std_Test,
trainStd$Personal.Loan[keep],
k =5)
aFNN <- table(predFNN,testStd$Personal.Loan)
aFNNAccuracy = sum(diag(aFNN))/nrow(X_Std_Test)
aFNNAccuracy
indices=knnx.index(X_Std_Train[keep,],
X_Std_Test, k=5)
indices
print(indices[20, ])
rm(list=ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 21 KNN Collaborative Filters/Lab activity")
Movie = read.csv("MovieRatings.csv",header = T,sep = ",")
as.matrix(sapply(Movie, as.numeric))
Movie.head()
str(Movie)
Movie1 = as.matrix(sapply(Movie, as.numeric))
View(Movie1)
Movie = read.csv("MovieRatings.csv",header = T,sep = ",")
Movie1 = cast (Movie, UserID ~ Movie, mean, value='Rating')
library(reshape)
Movie1 = cast(Movie, UserID ~ Movie, mean, value='Rating')
View(Movie1)
Movie1 = cast(Movie, UserID ~ Movie, value='Rating')
View(Movie1)
rm(list = ls())
data <- cars
hist(cars)
hist(cars$speed)
cor(cars$dist,cars$speed)
cov(cars$dist,cars$speed)
cor(cars$dist,cars$speed)^2
lmcars <- lm(dist~speed, data=cars)
summary(lmcars)
cor(cars$dist,cars$speed)^2
rm(list=ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 9 Multiple Regression/Lab Activity/20170121_Batch24_CSE7202c_Multiple_Lin_Reg_Lab_Activity")
CustData <- read.csv("CustomerData.csv",header = T,sep = ",")
CustData <- subset(CustData, select = -c('CustomerID'))
CustData <- subset(CustData, select = -c(CustomerID))
sapply(CustData, function(x) sum(is.na(x)))
unique(CustData$City)
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 9 Multiple Regression/Lab Activity/20170121_Batch24_CSE7202c_Multiple_Lin_Reg_Lab_Activity")
CustData <- read.csv("CustomerData.csv",header = T,sep = ",")
CustData <- subset(CustData, select = -c(CustomerID))
sapply(CustData, function(x) sum(is.na(x)))
CustData$City <- as.factor(as.character(CustData$City))
require(caTools)
set.seed(123)
sample = sample.split(CustData$TotalRevenueGenerated, SplitRatio = .70)
train = subset(CustData, sample == TRUE)
test = subset(CustData, sample == FALSE)
lmOut = lm(TotalRevenueGenerated ~., data = train)
summary(lmOut)
library(MASS)
step(lmOut, direction = both)
step(lmOut, direction = "both")
Model_AIC = lm(formula = TotalRevenueGenerated ~ City + NoOfChildren + MinAgeOfChild +
Tenure + FrquncyOfPurchase + NoOfUnitsPurchased + FrequencyOFPlay +
NoOfGamesPlayed + NoOfGamesBought + FavoriteChannelOfTransaction +
FavoriteGame, data = train)
summary(Model_AIC)
predicted <- predict(Model_AIC,test)
residual = test$TotalRevenueGenerated - predicted
plot(residual)
predicted <- predict(Model_AIC,train)
conf_matrix = table(train$TotalRevenueGenerated,predicted)
conf_matrix
predicted <- predict(Model_AIC,train)
conf_matrix = table(train$TotalRevenueGenerated,predicted)
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 8/Lab Activity/")
Cars<- read.csv("Toyota_SimpleReg.csv",header = T, sep = ",")
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 8/Lab Activity/")
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 8 Linear Regression/Lab Activity")
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 8/Lab Activity/")
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 8 Linear Regression/Lab Activity")
Cars<- read.csv("Toyota_SimpleReg.csv",header = T, sep = ",")
str(Cars)
Cars <- subset(Cars, select = -c(Id))
sapply(Cars,function(x) sum(is.na(x)))
cor(Cars$Price,Cars$Age_12_16)
library(caTools)
set.seed(123)
sample = sample.split(Cars$Price, SplitRatio = .70)
train = subset(Cars, sample == TRUE)
test = subset(Cars, sample == FALSE)
LmOut <- lm(Price~Age_12_16,data = train)
summary(LmOut)
library(DMwR)
regr.eval(train$Price, LmOut$fitted.values)
rm(list=ls())
