setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 13 Decission Trees - Pappu/DecisionTrees_LabActivity")
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 13 Decission Trees - Pappu/DecisionTrees_LabActivity")
Cust_Data <-  read.csv("CustomerData.csv",sep=",",header=T,fill=T)
names(Cust_Data)
Cust_Data <-Cust_Data[,-1]
str(Cust_Data)
sum(is.na(Cust_Data))
Cust_Data$City <- as.factor(as.character(Cust_Data$City))
str(Cust_Data)
library(DMwR)
Cust_imputed <- knnImputation(data = Cust_Data,k=10)
sum(is.na(Cust_imputed))
Cust_Data$NoOfChildren <- round(Cust_Data$NoOfChildren,0)
Cust_Data$FrquncyOfPurchase <- round(Cust_Data$FrquncyOfPurchase,0)
Cust_Data$FrequencyOFPlay <- round(Cust_Data$FrequencyOFPlay,0)
Cust_Data$NoOfGamesBought <- round(Cust_Data$NoOfGamesBought,0)
Cust_target <- subset(Cust_imputed,select = c(Revenue))
Cust_categorical <- subset(Cust_imputed,select = c(City,FavoriteChannelOfTransaction,FavoriteGame))
Cust_numerical <- subset(Cust_imputed,select = -c(City,FavoriteChannelOfTransaction,FavoriteGame,Revenue))
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 13 Decission Trees - Pappu/DecisionTrees_LabActivity")
rm(list=(ls(all=TRUE)))
setwd("")
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 13 Decission Trees - Pappu/DecisionTrees_LabActivity")
Cust_Data <-  read.csv("CustomerData.csv",sep=",",header=T,fill=T)
names(Cust_Data)
Cust_Data <-Cust_Data[,-1]
str(Cust_Data)
sum(is.na(Cust_Data))
Cust_Data$City <- as.factor(as.character(Cust_Data$City))
str(Cust_Data)
Cust_imputed <- knnImputation(data = Cust_Data,k=10)
library(DMwR)
Cust_imputed <- knnImputation(data = Cust_Data,k=10)
sum(is.na(Cust_imputed))
Cust_Data$NoOfChildren <- round(Cust_Data$NoOfChildren,0)
Cust_Data$FrquncyOfPurchase <- round(Cust_Data$FrquncyOfPurchase,0)
Cust_Data$FrequencyOFPlay <- round(Cust_Data$FrequencyOFPlay,0)
Cust_Data$NoOfGamesBought <- round(Cust_Data$NoOfGamesBought,0)
Cust_target <- subset(Cust_imputed,select = c(Revenue))
Cust_categorical <- subset(Cust_imputed,select = c(City,FavoriteChannelOfTransaction,FavoriteGame))
Cust_numerical <- subset(Cust_imputed,select = -c(City,FavoriteChannelOfTransaction,FavoriteGame,Revenue))
library(infotheo)
Cust_numerical_binned <- discretize(X = Cust_numerical,disc="equalwidth")
str(Cust_numerical_binned)
Cust_numerical_binned <- data.frame(apply(Cust_numerical_binned, 2,as.character))
str(Cust_numerical_binned)
Cust_numerical_binned <- discretize(X = Cust_numerical,disc="equalwidth")
str(Cust_numerical_binned)
Cust_numerical_binned <- data.frame(apply(Cust_numerical_binned, 2,as.character))
str(Cust_numerical_binned)
range(Cust_target$Revenue)
Cust_target_catg <-Cust_target
Cust_target_catg$Revenue <-ifelse(Cust_target_catg$Revenue<150,"Regular","Premium")#,ifelse(Cust_target_catg$Revenue<400,"Medium","High"))
str(Cust_target_catg$Revenue)
table(Cust_target_catg$Revenue)
Cust_target_catg$Revenue = as.factor(Cust_target_catg$Revenue)
str(Cust_target_catg)
levels(Cust_target_catg$Revenue)
Cust_final = cbind(Cust_categorical,Cust_numerical_binned,Cust_target_catg)
rows <- seq(1,nrow(Cust_final),1)
set.seed(100)
trainrows <- sample(rows, nrow(Cust_final)*0.7)
Cust_train <- Cust_final[trainrows,]
Cust_test <- Cust_final[-trainrows,]
library(C50)
DT_C50 <- C5.0(Revenue~.,data=Cust_train)
summary(DT_C50)
pred_Train = predict(DT_C50,newdata=Cust_train, type="class")
pred_Test = predict(DT_C50, newdata=Cust_test, type="class")
C50_train_Conf_Matrix = table(Cust_train$Revenue,pred_Train);C50_train_Conf_Matrix
C50_test_Conf_Matrix = table(Cust_test$Revenue,pred_Test);C50_test_Conf_Matrix
accuracy_C50_train = round((sum(diag(C50_train_Conf_Matrix))/sum(C50_train_Conf_Matrix))* 100,2)
accuracy_C50_train
accuracy_C50_test = round((sum(diag(C50_test_Conf_Matrix))/sum(C50_test_Conf_Matrix))*100,2)
accuracy_C50_test
C5imp(DT_C50, pct=TRUE)
library(rpart)
DT_rpart_class<-rpart(Revenue~.,data=Cust_train,method="class")
printcp(DT_rpart_class)
DT_rpart_class
pred_Train = predict(DT_rpart_class,newdata=Cust_train, type="class")
pred_Test = predict(DT_rpart_class, newdata=Cust_test, type="class")
Rpart_train_Conf_Matrix = table(Cust_train$Revenue,pred_Train);Rpart_train_Conf_Matrix
Rpart_test_Conf_Matrix = table(Cust_test$Revenue,pred_Test);Rpart_test_Conf_Matrix
accuracy_rpart_train = round((sum(diag(Rpart_train_Conf_Matrix))/sum(Rpart_train_Conf_Matrix))* 100,2)
accuracy_rpart_train
accuracy_rpart_test = round((sum(diag(Rpart_test_Conf_Matrix))/sum(Rpart_test_Conf_Matrix))*100,2)
accuracy_rpart_test
DT_rpart_class1<-rpart(Revenue~.,data=Cust_train,method="class",control = rpart.control(cp=0.001))
printcp(DT_rpart_class1)
plotcp(DT_rpart_class1)
plotcp(DT_rpart_class, minline=TRUE, col="blue", lwd=2, lty=1)# draw line 1 SD above minimum rel.error
DT_rpart_class1<-rpart(Revenue~.,data=Cust_train,method="class",control = rpart.control(cp=0.0050968))
printcp(DT_rpart_class1)
pred_Train1 = predict(DT_rpart_class1,newdata=Cust_train, type="class")
pred_Test1 = predict(DT_rpart_class1, newdata=Cust_test, type="class")
Rpart_train_Conf_Matrix1 = table(Cust_train$Revenue,pred_Train1);
Rpart_train_Conf_Matrix1
Rpart_test_Conf_Matrix1 = table(Cust_test$Revenue,pred_Test1);
Rpart_test_Conf_Matrix1
accuracy_rpart_train1 = round((sum(diag(Rpart_train_Conf_Matrix1))/sum(Rpart_train_Conf_Matrix1))* 100,2)
accuracy_rpart_train1
accuracy_rpart_test1 = round((sum(diag(Rpart_test_Conf_Matrix1))/sum(Rpart_test_Conf_Matrix1))*100,2)
accuracy_rpart_test1
Cust_finalReg = cbind(Cust_categorical,Cust_numerical_binned,Cust_target)
rows <- seq(1,nrow(Cust_finalReg),1)
set.seed(100)
trainrows <- sample(rows, nrow(Cust_finalReg)*0.7)
Cust_trainReg <- Cust_finalReg[trainrows,]
Cust_testReg <- Cust_finalReg[-trainrows,]
library(rpart)
library(rpart.plot)
DT_rpart_Reg<-rpart(Revenue~.,data=Cust_trainReg,method="anova")
DT_rpart_Reg<-rpart(Revenue~.,data=Cust_trainReg,method="anova",control = rpart.control(cp = 0.01960033))
printcp(DT_rpart_Reg)
DT_rpart_Reg
rpart.plot(DT_rpart_Reg)
predCartTrain=predict(DT_rpart_Reg, newdata=Cust_trainReg, type="vector")
predCartTest=predict(DT_rpart_Reg, newdata=Cust_testReg, type="vector")
regr.eval(Cust_trainReg[,"Revenue"], predCartTrain, train.y = Cust_trainReg[,"Revenue"])
regr.eval(Cust_testReg[,"Revenue"], predCartTest, train.y = Cust_testReg[,"Revenue"])
head(Cust_Data$NoOfChildren)
rm(list = ls())
setwd("C:/Users/quadris/Desktop/My Learning/INSOFE CPEE/Day 13/DecisionTrees_LabActivity/")
Data <- read.csv("CustomerData.csv", header = T, sep = ",")
str(Data)
CustData <- Data[-1]
sapply(CustData, function(x) sum(is.na(x)))
CustData$City<- as.factor(as.character(CustData$City))
CustData$NoOfChildren<- as.factor(as.character(CustData$NoOfChildren))
CustData$MinAgeOfChild<- as.factor(as.character(CustData$MinAgeOfChild))
CustData$MaxAgeOfChild<- as.factor(as.character(CustData$MaxAgeOfChild))
CustData$FrequencyOFPlay<- as.factor(as.character(CustData$FrequencyOFPlay))
CustData$NoOfGamesPlayed<- as.factor(as.character(CustData$NoOfGamesPlayed))
CustData$NoOfGamesBought<- as.factor(as.character(CustData$NoOfGamesBought))
levels(CustData$FrequencyOFPlay)
library(DMwR)
CustData<-knnImputation(CustData,scale=T,k=5) #KNN Imputation
sapply(CustData, function(x) sum(is.na(x)))
str(CustData)
CustData$City<- as.integer(as.character(CustData$City))
CustData$NoOfChildren<- as.integer(as.character(CustData$NoOfChildren))
CustData$MinAgeOfChild<- as.integer(as.character(CustData$MinAgeOfChild))
CustData$MaxAgeOfChild<- as.integer(as.character(CustData$MaxAgeOfChild))
CustData$FrequencyOFPlay<- as.integer(as.character(CustData$FrequencyOFPlay))
CustData$NoOfGamesPlayed<- as.integer(as.character(CustData$NoOfGamesPlayed))
CustData$NoOfGamesBought<- as.integer(as.character(CustData$NoOfGamesBought))
CustData$Revenue <- ifelse(CustData$Revenue<150,"Regular","Premium")
CustData$Revenue <- as.factor(as.character(CustData$Revenue))
require(caTools)
set.seed(123)
sample = sample.split(CustData$Revenue, SplitRatio = .70)
train = subset(CustData, sample == TRUE)
test = subset(CustData, sample == FALSE)
library(C50)
DT_C50 <- C5.0(Revenue~.,data = train)
Pred_Train <- predict(DT_C50, newdata = train,type="class")
Pred_Test <- predict(DT_C50, newdata = test,type="class")
Conf_Mat_Train = table(train$Revenue,Pred_Train)
Conf_Mat_Test = table(test$Revenue,Pred_Test)
Conf_Mat_Train
Conf_Mat_Test
Acc_Train <- sum(diag(Conf_Mat_Train)/sum(Conf_Mat_Train))
Acc_Test <- sum(diag(Conf_Mat_Test)/sum(Conf_Mat_Test))
Acc_Train
Acc_Test
C5imp(DT_C50,pct = TRUE)
library(rpart)
DT_rpart_class <- rpart(Revenue~.,data = train, method = "class")
pred_rpart_train <- predict(DT_rpart_class,newdata = train,type = "class")
pred_rpart_test <-predict(DT_rpart_class,newdata = test,type = "class")
Conf_Mat_rpart_Train <- table(train$Revenue,pred_rpart_train)
Conf_Mat_rpart_Test <- table(test$Revenue,pred_rpart_test)
Conf_Mat_rpart_Train
Conf_Mat_rpart_Test
Acc_rpart_Train <- sum(diag(Conf_Mat_rpart_Train)/sum(Conf_Mat_rpart_Train))
Acc_rpart_Test <- sum(diag(Conf_Mat_rpart_Test)/sum(Conf_Mat_rpart_Test))
Acc_rpart_Train
Acc_rpart_Test
